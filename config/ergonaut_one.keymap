#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick-tap-ms = <200>; };

&mt { quick-tap-ms = <200>; };

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri-layer {
            if-layers = <1 2>;
            then-layer = <6>;
        };
    };

    combos {
        compatible = "zmk,combos";

        game {
            bindings = <&tog 4>;
            key-positions = <17 38 37>;
        };

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <15 16>;
            layers = <0 4>;
        };

        Meta_Escape_R {
            bindings = <&td_meta_esc>;
            key-positions = <19 20>;
        };

        CW_Letters {
            bindings = <&cw_letters>;
            key-positions = <37 40>;
        };

        Meta {
            bindings = <&sk LEFT_META>;
            key-positions = <14 16>;
        };
    };

    behaviors {
        td_meta_esc: td_meta_esc {
            compatible = "zmk,behavior-tap-dance";
            label = "TD META-ESC";
            #binding-cells = <0>;
            bindings = <&sk LEFT_META>, <&kp ESCAPE>;
        };

        cw_letters: cw_letters {
            compatible = "zmk,behavior-caps-word";
            label = "CW_LETTERS";
            #binding-cells = <0>;
            continue-list = <Q W E R T A S D F G Z X C V B Y U I O P H J K L N M UNDERSCORE MINUS SPACE BACKSPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp LEFT_BRACKET    &kp Q  &kp W  &kp E      &kp R            &kp T        &kp Y        &kp U           &kp I        &kp O    &kp P     &kp RIGHT_BRACKET
&mt LEFT_ALT GRAVE  &kp A  &kp S  &kp D      &kp F            &kp G        &kp H        &kp J           &kp K        &kp L    &kp SEMI  &mt RCTRL SQT
&mt LCTRL MINUS     &kp Z  &kp X  &kp C      &kp V            &kp B        &kp N        &kp M           &kp COMMA    &kp DOT  &kp FSLH  &kp LEFT_ALT
                                  &lt 2 TAB  &mt LSHFT SPACE  &lt 1 ENTER  &lt 3 LCTRL  &mt RSHFT BSPC  &lt 2 LCTRL
            >;
        };

        lower_base {
            bindings = <
&kp F1     &kp EXCL  &kp AT  &kp HASH      &kp DOLLAR  &kp PERCENT  &kp CARET  &kp AMPS    &kp STAR  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp PIPE
&kp PLUS   &kp N1    &kp N2  &kp NUMBER_3  &kp N4      &kp N5       &kp N6     &kp N7      &kp N8    &kp N9                &kp N0                 &trans
&kp EQUAL  &kp F2    &kp F3  &kp F4        &kp F5      &kp F6       &kp F7     &kp F8      &kp F9    &kp F10               &kp F11                &kp F12
                             &trans        &trans      &trans       &trans     &kp DELETE  &trans
            >;
        };

        raise_base {
            bindings = <
&none  &none  &none                 &none                  &none             &none              &trans      &kp K_NEXT      &kp K_PREV         &kp K_PLAY_PAUSE  &trans         &trans
&none  &none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT    &kp DOWN_ARROW  &kp UP             &kp RIGHT         &trans         &none
&none  &none  &none                 &none                  &none             &none              &kp C_MUTE  &kp C_VOL_UP    &kp C_VOLUME_DOWN  &kp C_BRI_INC     &kp C_BRI_DEC  &trans
                                    &trans                 &trans            &trans             &trans      &trans          &trans
            >;
        };

        window_manager {
            bindings = <
&trans  &kp LG(F1)  &kp LG(F2)  &kp LG(F3)   &kp LG(F4)            &kp LG(F5)     &kp LG(F6)  &kp LG(F7)  &kp LG(F8)  &kp LG(F9)      &kp LG(F10)  &trans
&trans  &kp LG(N1)  &kp LG(N2)  &kp LG(N3)   &kp LG(N4)            &kp LG(N5)     &kp LG(H)   &kp LG(J)   &kp LG(K)   &kp LG(L)       &trans       &trans
&trans  &kp LG(N6)  &kp LG(N7)  &kp LG(N8)   &kp LG(NUMBER_9)      &kp LG(N0)     &trans      &trans      &trans      &kp LG(PERIOD)  &trans       &trans
                                &kp LG(TAB)  &mt LEFT_SHIFT SPACE  &kp LG(ENTER)  &trans      &trans      &trans
            >;
        };

        game_base {
            bindings = <
&kp N1  &kp Q  &kp W  &kp E             &kp R      &kp T         &trans  &trans  &trans  &trans  &trans  &trans
&kp N2  &kp A  &kp S  &kp D             &kp F      &kp G         &trans  &trans  &trans  &trans  &trans  &trans
&kp N3  &kp Z  &kp X  &kp C             &kp V      &kp B         &trans  &trans  &trans  &trans  &trans  &trans
                      &lt 5 LEFT_SHIFT  &kp SPACE  &kp LEFT_ALT  &trans  &trans  &trans
            >;
        };

        game_lower {
            bindings = <
&kp N4  &trans  &trans  &trans  &trans   &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp N5  &trans  &trans  &trans  &kp H    &kp J   &trans  &trans  &trans  &trans  &trans  &trans
&kp N6  &kp N   &kp M   &kp I   &kp TAB  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans   &trans  &trans  &trans  &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader  &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &bootloader
&bt BT_CLR   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset   &none         &none         &none         &none         &none         &none         &none         &none         &none         &none         &sys_reset
                                         &trans        &none         &trans        &none         &trans        &trans
            >;
        };
    };
};
